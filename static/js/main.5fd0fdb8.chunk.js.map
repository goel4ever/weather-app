{"version":3,"sources":["logo.svg","components/Title.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Title","className","Form","onSubmit","this","props","getWeather","type","name","placeholder","React","Component","Weather","city","country","temperature","humidity","description","error","BASE_URL","process","URL","App","state","undefined","e","a","preventDefault","zipCode","target","elements","zipcode","value","vendorUrl","fetch","api_call","json","data","console","log","setState","main","temp","sys","weather","Boolean","window","location","hostname","match","ReactGA","initialize","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,kC,yKCS5BC,G,YAPD,kBACZ,6BACE,wBAAIC,UAAU,0BAAd,mBACA,wBAAIA,UAAU,6BAAd,mDCHiBC,E,iLAEjB,OACE,0BAAMC,SAAUC,KAAKC,MAAMC,YACzB,2BAAOC,KAAK,OAAOC,KAAK,UAAUC,YAAY,mBAC9C,oD,GAL0BC,IAAMC,WCAnBC,E,iLAEjB,OACE,yBAAKX,UAAU,iBAEXG,KAAKC,MAAMQ,MAAQT,KAAKC,MAAMS,SAC3B,uBAAGb,UAAU,gBAAb,aACS,0BAAMA,UAAU,kBAAkBG,KAAKC,MAAMQ,KAA7C,KAAqDT,KAAKC,MAAMS,UAI5EV,KAAKC,MAAMU,aACR,uBAAGd,UAAU,gBAAb,gBACc,0BAAMA,UAAU,kBAAkBG,KAAKC,MAAMU,cAI9DX,KAAKC,MAAMW,UACR,uBAAGf,UAAU,gBAAb,aACS,0BAAMA,UAAU,kBAAkBG,KAAKC,MAAMW,WAIzDZ,KAAKC,MAAMY,aACR,uBAAGhB,UAAU,gBAAb,eACW,0BAAMA,UAAU,kBAAkBG,KAAKC,MAAMY,cAI3Db,KAAKC,MAAMa,OACR,uBAAGjB,UAAU,kBACbG,KAAKC,MAAMa,Y,GA/BaR,IAAMC,WCMrCQ,EAAQ,gEAA4DC,oCACpEC,EAAG,UAAMF,EAAN,SA+FMG,E,2MA5FbC,MAAQ,CACNR,iBAAaS,EACbX,UAAMW,EACNV,aAASU,EACTR,cAAUQ,EACVP,iBAAaO,EACbN,WAAOM,G,EAETlB,W,uCAAa,WAAOmB,GAAP,qBAAAC,EAAA,yDACXD,EAAEE,iBAEIC,EAAUH,EAAEI,OAAOC,SAASC,QAAQC,MAC1B,KAEZC,EAAYZ,GACZO,EAPO,wBAQTK,GAAS,UAAOL,EAAP,OARA,SAUcM,MAAMD,GAVpB,cAUHE,EAVG,iBAWUA,EAASC,OAXnB,QAWHC,EAXG,OAYTC,QAAQC,IAAIF,GAEZ,EAAKG,SAAS,CACZzB,YAAasB,EAAKI,KAAKC,KACvB7B,KAAMwB,EAAK7B,KACXM,QAASuB,EAAKM,IAAI7B,QAClBE,SAAUqB,EAAKI,KAAKzB,SACpBC,YAAaoB,EAAKO,QAAQ,GAAG3B,YAC7BC,MAAO,KApBA,wBAuBT,EAAKsB,SAAS,CACZzB,iBAAaS,EACbX,UAAMW,EACNV,aAASU,EACTR,cAAUQ,EACVP,iBAAaO,EACbN,MAAO,+BA7BA,4C,8HAkCX,OACE,6BACE,yBAAKjB,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,4BACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,2BACb,kBAAC,EAAD,CAAMK,WAAYF,KAAKE,aACvB,kBAAC,EAAD,CACES,YAAaX,KAAKmB,MAAMR,YACxBF,KAAMT,KAAKmB,MAAMV,KACjBC,QAASV,KAAKmB,MAAMT,QACpBE,SAAUZ,KAAKmB,MAAMP,SACrBC,YAAab,KAAKmB,MAAMN,YACxBC,MAAOd,KAAKmB,MAAML,kB,GA5DpBR,IAAMC,WCCJkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,EAAQC,WAAW,iBACnBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5fd0fdb8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\n\nconst Title = () => (\n  <div>\n    <h1 className=\"title-container__title\">Weather Finder!</h1>\n    <h3 className=\"title-container__subtitle\">Find out temperature, conditions and more...</h3>\n  </div>\n);\n\nexport default Title;\n","import React from 'react';\n\nexport default class Form extends React.Component {\n  render() {\n    return (\n      <form onSubmit={this.props.getWeather}>\n        <input type=\"text\" name=\"zipcode\" placeholder=\"Zip Code . . .\" />\n        <button>Get Weather</button>\n      </form>\n    );\n  }\n}\n","import React from 'react';\n\nexport default class Weather extends React.Component {\n  render() {\n    return (\n      <div className=\"weather__info\">\n        {\n          this.props.city && this.props.country\n          && <p className=\"weather__key\">\n            Location: <span className=\"weather__value\">{this.props.city}, {this.props.country}</span>\n          </p>\n        }\n        {\n          this.props.temperature\n          && <p className=\"weather__key\">\n              Temperature: <span className=\"weather__value\">{this.props.temperature}</span>\n          </p>\n        }\n        {\n          this.props.humidity\n          && <p className=\"weather__key\">\n            Humidity: <span className=\"weather__value\">{this.props.humidity}</span>\n          </p>\n        }\n        {\n          this.props.description\n          && <p className=\"weather__key\">\n            Conditions: <span className=\"weather__value\">{this.props.description}</span>\n          </p>\n        }\n        {\n          this.props.error\n          && <p className=\"weather__error\">\n            {this.props.error}\n          </p>\n        }\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Title from './components/Title';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\nconst ZIP_CODE = '08816';\nconst BASE_URL = `https://api.openweathermap.org/data/2.5/weather?appid=${process.env.REACT_APP_API_KEY_WEATHER}`;\nconst URL = `${BASE_URL}&zip=`;\n\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined,\n  }\n  getWeather = async (e) => {\n    e.preventDefault();\n\n    const zipCode = e.target.elements.zipcode.value;\n    const country = 'us';\n\n    let vendorUrl = URL;\n    if (zipCode) {\n      vendorUrl += `${zipCode},us`;\n\n      const api_call = await fetch(vendorUrl);\n      const data = await api_call.json();\n      console.log(data);\n\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: '',\n      });\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: 'Please submit valid values',\n      });\n    }\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                  <Title />\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                  <Form getWeather={this.getWeather} />\n                  <Weather\n                    temperature={this.state.temperature}\n                    city={this.state.city}\n                    country={this.state.country}\n                    humidity={this.state.humidity}\n                    description={this.state.description}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ReactGA from 'react-ga';\n\nReactGA.initialize('UA-68261332-2');\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}